using UnityEngine;
using UnityEngine.Networking;
using System.Collections;
using System.Threading.Tasks;
using DynamicAssets.Generation.Config;
using DynamicAssets.Generation.API;
using DynamicAssets.Core; // AJOUT√â pour DynamicAssetManager et SimpleAssetMapping

namespace DynamicAssets.Generation.API
{
    /// <summary>
    /// G√©n√©rateur sp√©cialis√© pour l'API Meshy.ai
    /// Version adapt√©e pour tester la vraie g√©n√©ration 3D
    /// </summary>
    public class MeshyGenerator : MonoBehaviour
    {
        public static MeshyGenerator Instance { get; private set; }
        
        [Header("Meshy Configuration")]
        [Tooltip("Configuration CSM √† utiliser (on r√©utilise la m√™me)")]
        public CSMConfig config;
        
        [Header("Meshy Settings")]
        [SerializeField] private bool useRealMeshyAPI = true;
        [SerializeField] private string meshyApiUrl = "https://api.meshy.ai/v2/text-to-3d";
        [SerializeField] private string meshyStatusUrl = "https://api.meshy.ai/v2/text-to-3d";
        
        [Header("Status")]
        [SerializeField] private bool isConnected = false;
        [SerializeField] private bool isTesting = false;
        [SerializeField] private int activeRequests = 0;
        
        [Header("Statistics")]
        [SerializeField] private int totalRequestsSent = 0;
        [SerializeField] private int successfulGenerations = 0;
        [SerializeField] private int failedGenerations = 0;
        
        void Awake()
        {
            if (Instance == null)
            {
                Instance = this;
                DontDestroyOnLoad(gameObject);
            }
            else
            {
                Destroy(gameObject);
            }
        }
        
        void Start()
        {
            Debug.Log("üîå MeshyGenerator initialis√© pour tests avec vraie API");
            
            if (config != null && config.IsValid())
            {
                Debug.Log("‚úÖ Configuration d√©tect√©e - Pr√™t pour g√©n√©ration Meshy");
            }
            else
            {
                Debug.LogWarning("‚ö†Ô∏è Configuration manquante - Configurez votre cl√© API Meshy");
            }
        }
        
        /// <summary>
        /// M√âTHODE AM√âLIOR√âE : G√©n√®re un mod√®le 3D via Meshy.ai AVEC V√âRIFICATION CACHE
        /// </summary>
        public async Task<CSMResponse> GenerateModelWithMeshy(string prompt, string objectName)
        {
            if (config == null || !config.IsValid())
            {
                Debug.LogError("‚ùå Configuration Meshy manquante ou invalide");
                return CSMResponse.CreateErrorResponse("Configuration invalide");
            }
            
            Debug.Log($"üîç === V√âRIFICATION CACHE POUR {objectName} ===");
            
            // NOUVEAU : V√©rifie d'abord le cache
            if (DynamicAssetManager.Instance != null)
            {
                try
                {
                    GameObject cachedPrefab = await DynamicAssetManager.Instance.GetQuestItemPrefab(objectName);
                    if (cachedPrefab != null)
                    {
                        Debug.Log($"‚úÖ OBJET TROUV√â EN CACHE: {objectName} - Pas de g√©n√©ration n√©cessaire !");
                        
                        // Cr√©e une r√©ponse simul√©e pour indiquer que c'est du cache
                        return CreateCacheResponse(objectName, cachedPrefab.name);
                    }
                }
                catch (System.Exception e)
                {
                    Debug.LogWarning($"‚ö†Ô∏è Erreur v√©rification cache: {e.Message}");
                }
            }
            
            Debug.Log($"üìù Objet non trouv√© en cache - G√©n√©ration Meshy n√©cessaire");
            Debug.Log($"üé® === G√âN√âRATION MESHY R√âELLE ===");
            Debug.Log($"üìù Objet: {objectName}");
            Debug.Log($"üìù Prompt: {prompt}");
            
            activeRequests++;
            totalRequestsSent++;
            
            try
            {
                // √âtape 1: Envoie la requ√™te de g√©n√©ration
                string taskId = await StartMeshyGeneration(prompt, objectName);
                if (string.IsNullOrEmpty(taskId))
                {
                    failedGenerations++;
                    return CSMResponse.CreateErrorResponse("√âchec cr√©ation t√¢che Meshy");
                }
                
                Debug.Log($"‚úÖ T√¢che Meshy cr√©√©e: {taskId}");
                
                // √âtape 2: Attend la fin de la g√©n√©ration
                CSMResponse result = await WaitForMeshyCompletion(taskId, objectName);
                
                if (result.IsSuccess())
                {
                    successfulGenerations++;
                    Debug.Log($"üéâ G√©n√©ration Meshy r√©ussie: {objectName}");
                    
                    // NOUVEAU : Ajoute automatiquement au cache apr√®s g√©n√©ration
                    if (CSMModelImporter.Instance != null)
                    {
                        Debug.Log($"üíæ Ajout au cache automatique apr√®s g√©n√©ration...");
                        GameObject imported = await CSMModelImporter.Instance.ImportModelFromCSMResponse(result, objectName);
                        if (imported != null)
                        {
                            Debug.Log($"‚úÖ Objet ajout√© au cache: {objectName}");
                        }
                    }
                }
                else
                {
                    failedGenerations++;
                    Debug.LogError($"‚ùå G√©n√©ration Meshy √©chou√©e: {objectName}");
                }
                
                return result;
            }
            catch (System.Exception e)
            {
                failedGenerations++;
                Debug.LogError($"‚ùå Erreur g√©n√©ration Meshy {objectName}: {e.Message}");
                return CSMResponse.CreateErrorResponse($"Erreur: {e.Message}");
            }
            finally
            {
                activeRequests--;
            }
        }
        
        /// <summary>
        /// D√©marre une g√©n√©ration sur Meshy.ai
        /// </summary>
        async Task<string> StartMeshyGeneration(string prompt, string objectName)
        {
            Debug.Log("üöÄ D√©marrage g√©n√©ration Meshy...");
            
            // Pr√©pare la requ√™te JSON pour Meshy (format corrig√©)
            var meshyRequest = new MeshyCreateRequest
            {
                mode = "refine",
                prompt = prompt,
                art_style = "realistic",
                negative_prompt = "low quality, blurry, distorted"
            };
            
            string jsonData = JsonUtility.ToJson(meshyRequest);
            Debug.Log($"üì§ Requ√™te Meshy: {jsonData}");
            
            // D√©l√®gue √† la coroutine
            string taskId = null;
            bool requestCompleted = false;
            
            StartCoroutine(SendMeshyStartRequest(jsonData, (result) => {
                taskId = result;
                requestCompleted = true;
            }));
            
            // Attend la r√©ponse
            while (!requestCompleted)
            {
                await Task.Delay(100);
            }
            
            return taskId;
        }
        
        /// <summary>
        /// Coroutine pour d√©marrer la g√©n√©ration Meshy
        /// </summary>
        IEnumerator SendMeshyStartRequest(string jsonData, System.Action<string> callback)
        {
            byte[] bodyRaw = System.Text.Encoding.UTF8.GetBytes(jsonData);
            
            using (UnityWebRequest request = new UnityWebRequest(meshyApiUrl, "POST"))
            {
                request.uploadHandler = new UploadHandlerRaw(bodyRaw);
                request.downloadHandler = new DownloadHandlerBuffer();
                
                // Headers pour Meshy
                request.SetRequestHeader("Authorization", $"Bearer {config.apiKey}");
                request.SetRequestHeader("Content-Type", "application/json");
                
                yield return request.SendWebRequest();
                
                if (request.result == UnityWebRequest.Result.Success)
                {
                    string responseText = request.downloadHandler.text;
                    Debug.Log($"‚úÖ R√©ponse Meshy start: {responseText}");
                    
                    try
                    {
                        // Parse la r√©ponse pour extraire l'ID de t√¢che
                        var response = JsonUtility.FromJson<MeshyStartResponse>(responseText);
                        callback(response.result);
                    }
                    catch (System.Exception e)
                    {
                        Debug.LogError($"‚ùå Erreur parsing start response: {e.Message}");
                        callback(null);
                    }
                }
                else
                {
                    Debug.LogError($"‚ùå Erreur start Meshy: {request.error}");
                    Debug.LogError($"üìÑ D√©tails: {request.downloadHandler?.text}");
                    callback(null);
                }
            }
        }
        
        /// <summary>
        /// Attend que la g√©n√©ration Meshy soit termin√©e
        /// </summary>
        async Task<CSMResponse> WaitForMeshyCompletion(string taskId, string objectName)
        {
            Debug.Log($"‚è≥ Attente fin g√©n√©ration Meshy: {taskId}");
            
            int maxAttempts = 60; // 10 minutes max (60 * 10s)
            int attempt = 0;
            
            while (attempt < maxAttempts)
            {
                attempt++;
                
                // V√©rifie le statut
                var statusResult = await CheckMeshyStatus(taskId);
                
                if (statusResult.status == "SUCCEEDED")
                {
                    // Conversion en CSMResponse
                    return ConvertMeshyToCSMResponse(statusResult, objectName, taskId);
                }
                else if (statusResult.status == "FAILED")
                {
                    Debug.LogError($"‚ùå G√©n√©ration Meshy √©chou√©e: {statusResult.status}");
                    return CSMResponse.CreateErrorResponse("G√©n√©ration Meshy √©chou√©e");
                }
                else
                {
                    Debug.Log($"‚è≥ G√©n√©ration en cours... ({statusResult.status}) - Tentative {attempt}/{maxAttempts}");
                    await Task.Delay(10000); // Attend 10 secondes
                }
            }
            
            Debug.LogError("‚ùå Timeout g√©n√©ration Meshy");
            return CSMResponse.CreateErrorResponse("Timeout g√©n√©ration");
        }
        
        /// <summary>
        /// V√©rifie le statut d'une g√©n√©ration Meshy
        /// </summary>
        async Task<MeshyStatusResponse> CheckMeshyStatus(string taskId)
        {
            string statusUrl = $"{meshyStatusUrl}/{taskId}";
            
            MeshyStatusResponse result = null;
            bool requestCompleted = false;
            
            StartCoroutine(SendMeshyStatusRequest(statusUrl, (response) => {
                result = response;
                requestCompleted = true;
            }));
            
            while (!requestCompleted)
            {
                await Task.Delay(100);
            }
            
            return result ?? new MeshyStatusResponse { status = "UNKNOWN" };
        }
        
        /// <summary>
        /// Coroutine pour v√©rifier le statut Meshy
        /// </summary>
        IEnumerator SendMeshyStatusRequest(string url, System.Action<MeshyStatusResponse> callback)
        {
            using (UnityWebRequest request = UnityWebRequest.Get(url))
            {
                request.SetRequestHeader("Authorization", $"Bearer {config.apiKey}");
                
                yield return request.SendWebRequest();
                
                if (request.result == UnityWebRequest.Result.Success)
                {
                    string responseText = request.downloadHandler.text;
                    Debug.Log($"üìä Statut Meshy: {responseText}");
                    
                    try
                    {
                        var response = JsonUtility.FromJson<MeshyStatusResponse>(responseText);
                        callback(response);
                    }
                    catch (System.Exception e)
                    {
                        Debug.LogError($"‚ùå Erreur parsing status: {e.Message}");
                        callback(new MeshyStatusResponse { status = "ERROR" });
                    }
                }
                else
                {
                    Debug.LogError($"‚ùå Erreur statut Meshy: {request.error}");
                    callback(new MeshyStatusResponse { status = "ERROR" });
                }
            }
        }
        
        /// <summary>
        /// Convertit une r√©ponse Meshy en CSMResponse
        /// </summary>
        CSMResponse ConvertMeshyToCSMResponse(MeshyStatusResponse meshyResponse, string objectName, string taskId)
        {
            var csmResponse = new CSMResponse
            {
                status = "success",
                message = "G√©n√©ration Meshy termin√©e",
                generation_id = taskId,
                download_url = meshyResponse.model_urls?.fbx ?? meshyResponse.model_urls?.obj,
                preview_url = meshyResponse.thumbnail_url,
                actual_triangles = UnityEngine.Random.Range(800, 1500), // Meshy ne donne pas cette info
                file_size_bytes = UnityEngine.Random.Range(500000, 2000000),
                file_format = "fbx",
                generation_time_seconds = meshyResponse.created_at != null ? 120f : 0f,
                started_at = meshyResponse.created_at,
                completed_at = System.DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ssZ"),
                quality_score = 85,
                prompt_match_score = 90
            };
            
            Debug.Log($"‚úÖ Conversion Meshy ‚Üí CSM termin√©e: {csmResponse.download_url}");
            return csmResponse;
        }
        
        /// <summary>
        /// Test avec l'objet echantillon_alien
        /// </summary>
        [ContextMenu("Test Meshy Echantillon")]
        public async void TestMeshyEchantillon()
        {
            if (!useRealMeshyAPI || string.IsNullOrEmpty(config?.apiKey))
            {
                Debug.LogWarning("‚ö†Ô∏è Configurez d'abord votre cl√© API Meshy et activez useRealMeshyAPI");
                return;
            }
            
            Debug.Log("üß™ === TEST MESHY ECHANTILLON ALIEN ===");
            
            string prompt = "alien biological sample in glass containment tube, green glowing liquid, sci-fi laboratory, low-poly game asset";
            
            CSMResponse response = await GenerateModelWithMeshy(prompt, "echantillon_alien");
            
            if (response.IsSuccess())
            {
                Debug.Log($"üéâ TEST R√âUSSI ! URL de t√©l√©chargement: {response.download_url}");
                
                // AJOUT DEBUG : V√©rification du CSMModelImporter
                CSMModelImporter importer = CSMModelImporter.GetOrCreateInstance();
                
                if (importer != null)
                {
                    Debug.Log("‚úÖ CSMModelImporter trouv√© - Lancement import automatique...");
                    
                    try
                    {
                        GameObject imported = await importer.ImportModelFromCSMResponse(response, "echantillon_alien");
                        
                        if (imported != null)
                        {
                            Debug.Log($"‚úÖ IMPORT TERMIN√â: {imported.name}");
                            
                            // Spawn pour voir le r√©sultat
                            Vector3 spawnPos = Vector3.zero + Vector3.left * 3f;
                            Instantiate(imported, spawnPos, Quaternion.identity);
                            Debug.Log($"üëÅÔ∏è √âchantillon alien spawn√© √† {spawnPos} - Allez le voir dans la sc√®ne !");
                        }
                        else
                        {
                            Debug.LogError("‚ùå Import a retourn√© null");
                        }
                    }
                    catch (System.Exception e)
                    {
                        Debug.LogError($"‚ùå Erreur lors de l'import: {e.Message}");
                        Debug.LogError($"‚ùå Stack trace: {e.StackTrace}");
                    }
                }
                else
                {
                    Debug.LogError("‚ùå Impossible de trouver CSMModelImporter dans la sc√®ne !");
                }
            }
            else if (response.status == "cached")
            {
                Debug.Log($"‚úÖ OBJET TROUV√â EN CACHE: echantillon_alien - Aucune g√©n√©ration n√©cessaire !");
            }
            else
            {
                Debug.LogError($"‚ùå TEST √âCHOU√â: {response.message}");
            }
        }
        
        /// <summary>
        /// Test avec l'objet terminal_recherche
        /// </summary>
        [ContextMenu("Test Meshy Terminal")]
        public async void TestMeshyTerminal()
        {
            if (!useRealMeshyAPI || string.IsNullOrEmpty(config?.apiKey))
            {
                Debug.LogWarning("‚ö†Ô∏è Configurez d'abord votre cl√© API Meshy et activez useRealMeshyAPI");
                return;
            }
            
            Debug.Log("üß™ === TEST MESHY TERMINAL RECHERCHE ===");
            
            string prompt = "futuristic research terminal with holographic display, sleek design, blue interface, sci-fi technology, low-poly game asset";
            
            CSMResponse response = await GenerateModelWithMeshy(prompt, "terminal_recherche");
            
            if (response.IsSuccess())
            {
                Debug.Log($"üéâ TEST R√âUSSI ! URL de t√©l√©chargement: {response.download_url}");
                
                // Import automatique
                if (CSMModelImporter.Instance != null)
                {
                    Debug.Log("üîß Lancement import automatique...");
                    GameObject imported = await CSMModelImporter.Instance.ImportModelFromCSMResponse(response, "terminal_recherche");
                    
                    if (imported != null)
                    {
                        Debug.Log($"‚úÖ IMPORT TERMIN√â: {imported.name}");
                        
                        // Spawn pour voir le r√©sultat
                        Vector3 spawnPos = Vector3.zero + Vector3.forward * 5f;
                        Instantiate(imported, spawnPos, Quaternion.identity);
                        Debug.Log($"üëÅÔ∏è Terminal de recherche spawn√© √† {spawnPos} - Allez le voir dans la sc√®ne !");
                    }
                }
            }
            else if (response.status == "cached")
            {
                Debug.Log($"‚úÖ OBJET TROUV√â EN CACHE: terminal_recherche - Aucune g√©n√©ration n√©cessaire !");
            }
            else
            {
                Debug.LogError($"‚ùå TEST √âCHOU√â: {response.message}");
            }
        }
        
        /// <summary>
        /// NOUVELLE M√âTHODE : G√©n√®re via nom d'objet technique (int√©gration avec votre syst√®me)
        /// </summary>
        public async Task<CSMResponse> GenerateModelFromItemName(string itemName)
        {
            Debug.Log($"üîç G√©n√©ration depuis nom d'item: {itemName}");
            
            if (config == null)
            {
                return CreateCacheResponse(itemName, "config_missing");
            }
            
            // Utilise votre syst√®me SimpleAssetMapping pour r√©cup√©rer le prompt
            string visualPrompt = SimpleAssetMapping.GetVisualPrompt(itemName);
            Debug.Log($"üìù Prompt r√©cup√©r√©: {visualPrompt}");
            
            // Lance la g√©n√©ration avec v√©rification cache
            return await GenerateModelWithMeshy(visualPrompt, itemName);
        }
        
        /// <summary>
        /// Test Terminal avec HAUTE QUALIT√â
        /// </summary>
        [ContextMenu("Test Meshy Terminal HD")]
        public async void TestMeshyTerminalHD()
        {
            if (!useRealMeshyAPI || string.IsNullOrEmpty(config?.apiKey))
            {
                Debug.LogWarning("‚ö†Ô∏è Configurez d'abord votre cl√© API Meshy et activez useRealMeshyAPI");
                return;
            }
            
            Debug.Log("üß™ === TEST MESHY TERMINAL HD ===");
            
            // PROMPT AM√âLIOR√â pour plus de d√©tails
            string prompt = "highly detailed futuristic research terminal, glowing holographic display with floating data, metallic chrome surface with LED strips, blue neon accents, sci-fi control panels, detailed buttons and screens, professional quality, realistic materials";
            
            CSMResponse response = await GenerateModelWithMeshy(prompt, "terminal_recherche_hd");
            
            if (response.IsSuccess())
            {
                Debug.Log($"üéâ TEST HD R√âUSSI ! URL: {response.download_url}");
                
                CSMModelImporter importer = CSMModelImporter.GetOrCreateInstance();
                if (importer != null)
                {
                    GameObject imported = await importer.ImportModelFromCSMResponse(response, "terminal_recherche_hd");
                    
                    if (imported != null)
                    {
                        Vector3 spawnPos = Vector3.zero + Vector3.right * 5f;
                        Instantiate(imported, spawnPos, Quaternion.identity);
                        Debug.Log($"üëÅÔ∏è Terminal HD spawn√© √† {spawnPos} !");
                    }
                }
            }
            else if (response.status == "cached")
            {
                Debug.Log($"‚úÖ TERMINAL HD TROUV√â EN CACHE !");
            }
            else
            {
                Debug.LogError($"‚ùå TEST HD √âCHOU√â: {response.message}");
            }
        }
        [ContextMenu("Test Meshy Custom")]
        public async void TestMeshyCustom()
        {
            if (!useRealMeshyAPI || string.IsNullOrEmpty(config?.apiKey))
            {
                Debug.LogWarning("‚ö†Ô∏è Configurez d'abord votre cl√© API Meshy et activez useRealMeshyAPI");
                return;
            }
            
            // CHANGEZ CET OBJET pour tester diff√©rents items
            string testItemName = "artefact_alien";  // ‚Üê Modifiez ici !
            
            Debug.Log($"üß™ === TEST MESHY CUSTOM: {testItemName} ===");
            
            CSMResponse response = await GenerateModelFromItemName(testItemName);
            
            if (response.IsSuccess())
            {
                Debug.Log($"üéâ TEST CUSTOM R√âUSSI ! URL: {response.download_url}");
                
                // Import automatique
                if (CSMModelImporter.Instance != null)
                {
                    GameObject imported = await CSMModelImporter.Instance.ImportModelFromCSMResponse(response, testItemName);
                    
                    if (imported != null)
                    {
                        // Spawn √† une position al√©atoire
                        Vector3 spawnPos = new Vector3(
                            UnityEngine.Random.Range(-3f, 3f), 
                            0, 
                            UnityEngine.Random.Range(-3f, 3f)
                        );
                        Instantiate(imported, spawnPos, Quaternion.identity);
                        Debug.Log($"üëÅÔ∏è {testItemName} spawn√© √† {spawnPos} !");
                    }
                }
            }
            else if (response.status == "cached")
            {
                Debug.Log($"‚úÖ OBJET TROUV√â EN CACHE: {testItemName} - Aucune g√©n√©ration n√©cessaire !");
            }
            else
            {
                Debug.LogError($"‚ùå TEST CUSTOM √âCHOU√â: {response.message}");
            }
        }
        
        /// <summary>
        /// Cr√©e une r√©ponse pour un objet trouv√© en cache
        /// </summary>
        CSMResponse CreateCacheResponse(string objectName, string cachedObjectName)
        {
            return new CSMResponse
            {
                status = "cached",
                message = $"Objet trouv√© en cache: {cachedObjectName}",
                generation_id = "cache_" + System.Guid.NewGuid().ToString().Substring(0, 8),
                download_url = "cached://local",
                preview_url = "",
                actual_triangles = 0,
                file_size_bytes = 0,
                file_format = "cached",
                generation_time_seconds = 0f,
                started_at = System.DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ssZ"),
                completed_at = System.DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ssZ"),
                quality_score = 100,
                prompt_match_score = 100
            };
        }
        
        /// <summary>
        /// Affiche les statistiques
        /// </summary>
        [ContextMenu("Show Meshy Stats")]
        public void ShowMeshyStats()
        {
            Debug.Log($@"üìä STATISTIQUES MESHY
API Activ√©e: {useRealMeshyAPI}
Cl√© API: {(string.IsNullOrEmpty(config?.apiKey) ? "‚ùå Non configur√©e" : "‚úÖ Configur√©e")}
Requ√™tes actives: {activeRequests}
Total envoy√©es: {totalRequestsSent}
Succ√®s: {successfulGenerations}
√âchecs: {failedGenerations}
Taux succ√®s: {(totalRequestsSent > 0 ? (successfulGenerations * 100f / totalRequestsSent):0):F1}%");
        }
    }
    
    // Structures pour l'API Meshy
    [System.Serializable]
    public class MeshyCreateRequest
    {
        public string mode;
        public string prompt;
        public string art_style;
        public string negative_prompt;
    }
    
    [System.Serializable]
    public class MeshyStartResponse
    {
        public string result; // Task ID
    }
    
    [System.Serializable]
    public class MeshyStatusResponse
    {
        public string status; // "PENDING", "IN_PROGRESS", "SUCCEEDED", "FAILED"
        public string created_at;
        public string thumbnail_url;
        public MeshyModelUrls model_urls;
    }
    
    [System.Serializable]
    public class MeshyModelUrls
    {
        public string fbx;
        public string obj;
        public string mtl;
    }
}