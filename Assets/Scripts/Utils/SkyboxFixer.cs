using UnityEngine;
using UnityEngine.Rendering;

/// <summary>
/// Diagnostique et corrige les probl√®mes de skybox
/// </summary>
public class SkyboxFixer : MonoBehaviour
{
    [Header("Diagnostic")]
    public bool runDiagnostic = true;
    public bool autoFix = false;
    
    [Header("Fix Options")]
    public Color fallbackColor = new Color(0.5f, 0.7f, 1f, 1f); // Bleu ciel
    public Material defaultSkyboxMaterial;
    
    void Start()
    {
        if (runDiagnostic)
            DiagnoseSkyboxIssues();
            
        if (autoFix)
            AttemptAutoFix();
    }
    
    void DiagnoseSkyboxIssues()
    {
        Debug.Log("=== üåå DIAGNOSTIC SKYBOX ===");
        
        // V√©rifie les cam√©ras
        Camera[] cameras = FindObjectsOfType<Camera>();
        Debug.Log($"üì∑ {cameras.Length} cam√©ra(s) trouv√©e(s)");
        
        foreach (Camera cam in cameras)
        {
            Debug.Log($"\nüì∑ Cam√©ra: {cam.name}");
            Debug.Log($"  - Clear Flags: {cam.clearFlags}");
            Debug.Log($"  - Background Color: {cam.backgroundColor}");
            Debug.Log($"  - Depth: {cam.depth}");
            
            if (cam.clearFlags == CameraClearFlags.Nothing)
            {
                Debug.LogError($"  ‚ùå PROBL√àME: Clear Flags sur 'Don't Clear' !");
            }
            else if (cam.clearFlags == CameraClearFlags.Depth && cam.depth == -1)
            {
                Debug.LogWarning($"  ‚ö†Ô∏è Clear Flags sur 'Depth only' pour la cam√©ra principale");
            }
        }
        
        // V√©rifie la skybox globale
        Material skybox = RenderSettings.skybox;
        if (skybox == null)
        {
            Debug.LogError("‚ùå PROBL√àME: Aucune skybox assign√©e dans RenderSettings !");
        }
        else
        {
            Debug.Log($"\nüåå Skybox actuelle: {skybox.name}");
            Debug.Log($"  - Shader: {skybox.shader.name}");
        }
        
        // V√©rifie l'ambient
        Debug.Log($"\nüí° Param√®tres d'ambiance:");
        Debug.Log($"  - Ambient Mode: {RenderSettings.ambientMode}");
        Debug.Log($"  - Ambient Color: {RenderSettings.ambientLight}");
        
        Debug.Log("\n=== FIN DU DIAGNOSTIC ===");
    }
    
    void AttemptAutoFix()
    {
        Debug.Log("\nüîß Tentative de correction automatique...");
        
        // Trouve la cam√©ra principale
        Camera mainCam = Camera.main;
        if (mainCam == null)
        {
            mainCam = FindObjectOfType<Camera>();
        }
        
        if (mainCam != null)
        {
            // Fix les Clear Flags
            if (mainCam.clearFlags == CameraClearFlags.Nothing || 
                mainCam.clearFlags == CameraClearFlags.Depth)
            {
                mainCam.clearFlags = CameraClearFlags.Skybox;
                mainCam.backgroundColor = fallbackColor;
                Debug.Log("‚úÖ Clear Flags corrig√©s sur 'Skybox'");
            }
            
            // Si pas de skybox, utilise une couleur unie
            if (RenderSettings.skybox == null)
            {
                if (defaultSkyboxMaterial != null)
                {
                    RenderSettings.skybox = defaultSkyboxMaterial;
                    Debug.Log("‚úÖ Skybox par d√©faut assign√©e");
                }
                else
                {
                    mainCam.clearFlags = CameraClearFlags.SolidColor;
                    mainCam.backgroundColor = fallbackColor;
                    Debug.Log("‚úÖ Utilisation d'une couleur unie comme fallback");
                }
            }
        }
        else
        {
            Debug.LogError("‚ùå Aucune cam√©ra trouv√©e pour la correction !");
        }
    }
    
    [ContextMenu("Force Fix Skybox")]
    public void ForceFixSkybox()
    {
        Camera mainCam = Camera.main ?? FindObjectOfType<Camera>();
        if (mainCam != null)
        {
            mainCam.clearFlags = CameraClearFlags.SolidColor;
            mainCam.backgroundColor = fallbackColor;
            Debug.Log("‚úÖ Skybox forc√©e en couleur unie");
        }
    }
    
    [ContextMenu("Create Procedural Skybox")]
    public void CreateProceduralSkybox()
    {
        // Cr√©e un material de skybox proc√©dural
        Material skyboxMat = new Material(Shader.Find("Skybox/Procedural"));
        skyboxMat.name = "ProceduralSkybox_Generated";
        
        // Configure les param√®tres
        skyboxMat.SetFloat("_SunSize", 0.04f);
        skyboxMat.SetFloat("_AtmosphereThickness", 0.7f);
        skyboxMat.SetColor("_SkyTint", new Color(0.5f, 0.5f, 0.5f));
        skyboxMat.SetColor("_GroundColor", new Color(0.369f, 0.349f, 0.341f));
        skyboxMat.SetFloat("_Exposure", 0.9f);
        
        // Assigne la skybox
        RenderSettings.skybox = skyboxMat;
        DynamicGI.UpdateEnvironment();
        
        Debug.Log("‚úÖ Skybox proc√©durale cr√©√©e et assign√©e !");
        
        // Met aussi √† jour la cam√©ra
        Camera mainCam = Camera.main ?? FindObjectOfType<Camera>();
        if (mainCam != null)
        {
            mainCam.clearFlags = CameraClearFlags.Skybox;
        }
    }
}
