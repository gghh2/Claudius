using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class QuestListItem : MonoBehaviour
{
    [Header("UI Elements")]
    public TextMeshProUGUI questTitleText;
    public TextMeshProUGUI questGiverText;
    public TextMeshProUGUI questLocationText;
    public TextMeshProUGUI questProgressText;
    public Button questButton; // Pour cliquer sur la qu√™te
    public Image backgroundImage; // Pour changer la couleur de fond
    
    private JournalQuest linkedQuest;
    
    void Start()
    {
        // Setup du bouton de clic
        if (questButton != null)
        {
            questButton.onClick.AddListener(OnQuestClicked);
        }
    }
    
    // M√©thode appel√©e pour configurer cette ligne avec une qu√™te
    public void SetupQuest(JournalQuest quest)
    {
        linkedQuest = quest;
        
        // NOUVEAU : Force le style des textes (pas de gras)
        RemoveBoldFromTexts();
        
        // Affiche les informations de la qu√™te
        if (questTitleText != null)
            questTitleText.text = quest.questTitle; // D√©j√† format√© dans JournalQuest
            
        if (questGiverText != null)
            questGiverText.text = $"üë§ {quest.giverNPCName}"; // D√©j√† format√© dans JournalQuest
            
        if (questLocationText != null)
            questLocationText.text = $"üìç {quest.zoneName}"; // D√©j√† format√© dans JournalQuest
            
        if (questProgressText != null)
            questProgressText.text = $"üìä {quest.GetProgressText()}";
        
        // Change la couleur de fond selon le statut
        UpdateAppearance();
    }
    
    // NOUVEAU : M√©thode pour enlever le gras de tous les textes
    void RemoveBoldFromTexts()
    {
        TextMeshProUGUI[] allTexts = { questTitleText, questGiverText, questLocationText, questProgressText };
        
        foreach (var textComponent in allTexts)
        {
            if (textComponent != null)
            {
                // Enl√®ve le style Bold
                textComponent.fontStyle &= ~FontStyles.Bold;
                
                // Si vous voulez aussi enlever l'outline
                var outline = textComponent.GetComponent<UnityEngine.UI.Outline>();
                if (outline != null)
                {
                    outline.enabled = false;
                }
            }
        }
    }
    
    void UpdateAppearance()
    {
        if (linkedQuest == null || backgroundImage == null) return;
        
        // Couleur de fond selon le statut
        Color bgColor = linkedQuest.GetStatusColor();
        bgColor.a = 0.3f; // Rend semi-transparent
        backgroundImage.color = bgColor;
        
        // Change la couleur du titre aussi
        if (questTitleText != null)
        {
            questTitleText.color = linkedQuest.GetStatusColor();
        }
    }
    
    // Appel√© quand on clique sur cette qu√™te
    void OnQuestClicked()
    {
        if (linkedQuest != null && QuestJournalUI.Instance != null)
        {
            // Affiche les d√©tails de cette qu√™te
            QuestJournalUI.Instance.ShowQuestDetails(linkedQuest);
            
            Debug.Log($"üéØ Qu√™te s√©lectionn√©e: {linkedQuest.questTitle}");
        }
    }
    
    // M√©thode pour mettre √† jour l'affichage si la qu√™te change
    public void RefreshDisplay()
    {
        if (linkedQuest != null)
        {
            SetupQuest(linkedQuest);
        }
    }
}