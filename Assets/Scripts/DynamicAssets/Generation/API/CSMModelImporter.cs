using UnityEngine;
using UnityEngine.Networking;
using System.Collections;
using System.Threading.Tasks;
using System.IO;
using DynamicAssets.Generation.API;
using DynamicAssets.Generation.Config;
using DynamicAssets.Core;

namespace DynamicAssets.Generation.API
{
    /// <summary>
    /// G√®re le t√©l√©chargement et l'import automatique des mod√®les CSM dans Unity
    /// </summary>
    public class CSMModelImporter : MonoBehaviour
    {
        public static CSMModelImporter Instance { get; private set; }
        
        [Header("Import Settings")]
        [SerializeField] private string downloadFolder = "GeneratedAssets/Downloads/";
        [SerializeField] private string modelsFolder = "GeneratedAssets/Models/";
        [SerializeField] private string prefabsFolder = "GeneratedAssets/Prefabs/";
        
        [Header("Import Configuration")]
        [SerializeField] private bool autoOptimizeMesh = true;
        [SerializeField] private bool generateColliders = true;
        [SerializeField] private bool addQuestObjectComponent = true;
        
        [Header("Status")]
        [SerializeField] private int activeDownloads = 0;
        [SerializeField] private int totalDownloads = 0;
        [SerializeField] private int successfulImports = 0;
        [SerializeField] private int failedImports = 0;
        
        [Header("Debug")]
        [SerializeField] private bool debugMode = true;
        
        // Paths complets
        private string fullDownloadPath;
        private string fullModelsPath;
        private string fullPrefabsPath;
        
        void Awake()
        {
            if (Instance == null)
            {
                Instance = this;
                DontDestroyOnLoad(gameObject);
                InitializePaths();
                Debug.Log("‚úÖ CSMModelImporter Instance cr√©√©e et initialis√©e");
            }
            else
            {
                Debug.LogWarning("‚ö†Ô∏è CSMModelImporter Instance d√©j√† existante - Destruction de ce doublon");
                Destroy(gameObject);
            }
        }
        
        /// <summary>
        /// Initialise les chemins de dossiers
        /// </summary>
        void InitializePaths()
        {
            fullDownloadPath = Path.Combine(Application.dataPath, downloadFolder);
            fullModelsPath = Path.Combine(Application.dataPath, modelsFolder);
            fullPrefabsPath = Path.Combine(Application.dataPath, prefabsFolder);
            
            // Cr√©e les dossiers s'ils n'existent pas
            Directory.CreateDirectory(fullDownloadPath);
            Directory.CreateDirectory(fullModelsPath);
            Directory.CreateDirectory(fullPrefabsPath);
            
            if (debugMode)
            {
                Debug.Log($"üìÅ Chemins d'import initialis√©s:");
                Debug.Log($"  Downloads: {fullDownloadPath}");
                Debug.Log($"  Models: {fullModelsPath}");
                Debug.Log($"  Prefabs: {fullPrefabsPath}");
            }
        }
        
        /// <summary>
        /// M√âTHODE PRINCIPALE : Import complet depuis une r√©ponse CSM
        /// </summary>
        public async Task<GameObject> ImportModelFromCSMResponse(CSMResponse response, string itemName)
        {
            if (response == null || !response.IsSuccess())
            {
                Debug.LogError("‚ùå R√©ponse CSM invalide pour import");
                return null;
            }
            
            if (debugMode)
                Debug.Log($"üöÄ === D√âBUT IMPORT : {itemName} ===");
            
            totalDownloads++;
            activeDownloads++;
            
            try
            {
                // √âtape 1: T√©l√©chargement du mod√®le
                string localFilePath = await DownloadModel(response, itemName);
                if (string.IsNullOrEmpty(localFilePath))
                {
                    failedImports++;
                    return null;
                }
                
                // √âtape 2: Import dans Unity
                GameObject prefab = await ImportModelToUnity(localFilePath, itemName, response);
                if (prefab != null)
                {
                    successfulImports++;
                    
                    // √âtape 3: Mise √† jour du cache
                    UpdateAssetCache(itemName, prefab, localFilePath, response);
                    
                    if (debugMode)
                        Debug.Log($"‚úÖ === IMPORT TERMIN√â : {itemName} ===");
                }
                else
                {
                    failedImports++;
                }
                
                return prefab;
            }
            catch (System.Exception e)
            {
                failedImports++;
                Debug.LogError($"‚ùå Erreur import {itemName}: {e.Message}");
                return null;
            }
            finally
            {
                activeDownloads--;
            }
        }
        
        /// <summary>
        /// T√©l√©charge le mod√®le depuis l'URL CSM
        /// </summary>
        async Task<string> DownloadModel(CSMResponse response, string itemName)
        {
            if (string.IsNullOrEmpty(response.download_url))
            {
                Debug.LogError("‚ùå URL de t√©l√©chargement manquante");
                return null;
            }
            
            // CORRECTION : V√©rification des chemins
            if (string.IsNullOrEmpty(fullDownloadPath))
            {
                Debug.LogError("‚ùå fullDownloadPath est null - R√©initialisation...");
                InitializePaths();
                
                if (string.IsNullOrEmpty(fullDownloadPath))
                {
                    Debug.LogError("‚ùå Impossible d'initialiser fullDownloadPath");
                    return null;
                }
            }
            
            // D√©termine le nom de fichier et l'extension
            string fileExtension = GetFileExtension(response.file_format, response.download_url);
            string fileName = $"{itemName}_{response.generation_id}{fileExtension}";
            
            // CORRECTION : Validation avant Path.Combine
            if (string.IsNullOrEmpty(fileName))
            {
                Debug.LogError("‚ùå fileName est null ou vide");
                return null;
            }
            
            Debug.Log($"üìÅ Paths debug:");
            Debug.Log($"  fullDownloadPath: '{fullDownloadPath}'");
            Debug.Log($"  fileName: '{fileName}'");
            
            string localPath = Path.Combine(fullDownloadPath, fileName);
            
            if (debugMode)
                Debug.Log($"üì• T√©l√©chargement R√âEL: {response.download_url} ‚Üí {fileName}");
            
            // T√©l√©chargement r√©el via coroutine
            bool downloadSuccess = false;
            bool downloadCompleted = false;
            
            StartCoroutine(DownloadFileCoroutine(response.download_url, localPath, (success) => {
                downloadSuccess = success;
                downloadCompleted = true;
            }));
            
            // Attend la fin du t√©l√©chargement
            while (!downloadCompleted)
            {
                await Task.Delay(100);
            }
            
            if (downloadSuccess && File.Exists(localPath))
            {
                Debug.Log($"‚úÖ T√©l√©chargement r√©el termin√©: {fileName} ({new FileInfo(localPath).Length} bytes)");
                return localPath;
            }
            else
            {
                Debug.LogError($"‚ùå √âchec t√©l√©chargement: {fileName}");
                return null;
            }
        }
        
        /// <summary>
        /// Coroutine pour t√©l√©charger le fichier
        /// </summary>
        IEnumerator DownloadFileCoroutine(string url, string localPath, System.Action<bool> callback)
        {
            using (UnityWebRequest request = UnityWebRequest.Get(url))
            {
                request.downloadHandler = new DownloadHandlerFile(localPath);
                request.timeout = 60; // 1 minute timeout
                
                yield return request.SendWebRequest();
                
                if (request.result == UnityWebRequest.Result.Success)
                {
                    Debug.Log($"‚úÖ Fichier t√©l√©charg√©: {Path.GetFileName(localPath)} ({request.downloadedBytes} bytes)");
                    callback(true);
                }
                else
                {
                    Debug.LogError($"‚ùå Erreur t√©l√©chargement: {request.error}");
                    callback(false);
                }
            }
        }
        
        /// <summary>
        /// Importe le mod√®le t√©l√©charg√© dans Unity
        /// </summary>
        async Task<GameObject> ImportModelToUnity(string filePath, string itemName, CSMResponse response)
        {
            if (debugMode)
                Debug.Log($"üîß Import Unity: {Path.GetFileName(filePath)}");
            
            // V√©rifie que le fichier existe r√©ellement
            if (!File.Exists(filePath))
            {
                Debug.LogWarning($"‚ö†Ô∏è Fichier non trouv√©: {filePath} - Utilisation mod√®le simul√©");
                return CreateSimulatedModel(itemName, response);
            }
            
            // PHASE 2B.3 : Pour l'instant, on simule l'import m√™me avec un vrai fichier
            // En Phase 2C, on utilisera AssetDatabase pour l'import r√©el
            
            await Task.Delay(1000); // Simule le temps d'import
            
            Debug.Log($"üìÅ Fichier r√©el d√©tect√©: {new FileInfo(filePath).Length} bytes");
            Debug.Log($"üîß Import Unity simul√© pour fichier r√©el: {Path.GetFileName(filePath)}");
            
            // SIMULATION : Cr√©e un GameObject de test mais avec m√©tadonn√©es r√©elles
            GameObject simulatedModel = CreateSimulatedModel(itemName, response);
            
            if (simulatedModel != null)
            {
                // Configure le mod√®le avec infos r√©elles
                ConfigureImportedModel(simulatedModel, itemName, response);
                
                // Ajoute des m√©tadonn√©es sur le fichier r√©el
                GeneratedAssetInfo assetInfo = simulatedModel.GetComponent<GeneratedAssetInfo>();
                if (assetInfo != null)
                {
                    assetInfo.realFilePath = filePath;
                    assetInfo.realFileSize = new FileInfo(filePath).Length;
                    assetInfo.wasReallyDownloaded = true;
                }
                
                // Cr√©e un prefab simul√©
                GameObject prefab = CreatePrefabFromModel(simulatedModel, itemName);
                
                if (debugMode)
                    Debug.Log($"‚úÖ Mod√®le import√© (simul√© avec fichier r√©el): {itemName}");
                
                return prefab;
            }
            
            return null;
        }
        
        /// <summary>
        /// SIMULATION : Cr√©e un mod√®le de test (en attendant l'import r√©el)
        /// </summary>
        GameObject CreateSimulatedModel(string itemName, CSMResponse response)
        {
            // Cr√©e un objet basique selon le type d'item
            GameObject model;
            
            if (itemName.Contains("cristal") || itemName.Contains("crystal"))
            {
                model = GameObject.CreatePrimitive(PrimitiveType.Cube);
                model.name = $"Generated_{itemName}";
                
                // Style cristal
                Renderer renderer = model.GetComponent<Renderer>();
                Material material = new Material(Shader.Find("Standard"));
                material.color = new Color(0.3f, 0.7f, 1f, 0.8f); // Bleu cristallin
                material.SetFloat("_Metallic", 0.8f);
                material.SetFloat("_Smoothness", 0.9f);
                renderer.material = material;
                
                // Rotation pour look plus int√©ressant
                model.transform.rotation = Quaternion.Euler(45, 45, 0);
                model.transform.localScale = Vector3.one * 0.8f;
            }
            else if (itemName.Contains("terminal") || itemName.Contains("console"))
            {
                model = GameObject.CreatePrimitive(PrimitiveType.Cube);
                model.name = $"Generated_{itemName}";
                
                // Style terminal
                Renderer renderer = model.GetComponent<Renderer>();
                Material material = new Material(Shader.Find("Standard"));
                material.color = new Color(0.2f, 0.2f, 0.3f); // Gris technologique
                material.SetFloat("_Metallic", 0.9f);
                material.SetFloat("_Smoothness", 0.7f);
                renderer.material = material;
                
                model.transform.localScale = new Vector3(1.2f, 0.8f, 0.6f);
            }
            else
            {
                // Objet g√©n√©rique
                model = GameObject.CreatePrimitive(PrimitiveType.Sphere);
                model.name = $"Generated_{itemName}";
                
                Renderer renderer = model.GetComponent<Renderer>();
                Material material = new Material(Shader.Find("Standard"));
                material.color = new Color(Random.Range(0.3f, 1f), Random.Range(0.3f, 1f), Random.Range(0.3f, 1f));
                renderer.material = material;
            }
            
            return model;
        }
        
        /// <summary>
        /// Configure le mod√®le import√© avec les composants n√©cessaires
        /// </summary>
        void ConfigureImportedModel(GameObject model, string itemName, CSMResponse response)
        {
            // Supprime le collider par d√©faut si n√©cessaire
            Collider defaultCollider = model.GetComponent<Collider>();
            if (defaultCollider != null && !generateColliders)
            {
                DestroyImmediate(defaultCollider);
            }
            
            // Ajoute le composant QuestObject si n√©cessaire
            if (addQuestObjectComponent)
            {
                QuestObject questObj = model.GetComponent<QuestObject>();
                if (questObj == null)
                {
                    questObj = model.AddComponent<QuestObject>();
                }
                
                questObj.objectName = itemName;
                questObj.objectType = QuestObjectType.Item; // Par d√©faut
            }
            
            // Optimise le mesh si demand√©
            if (autoOptimizeMesh)
            {
                OptimizeMeshForRuntime(model);
            }
            
            // Ajoute des m√©tadonn√©es sur la g√©n√©ration
            GeneratedAssetInfo assetInfo = model.AddComponent<GeneratedAssetInfo>();
            assetInfo.itemName = itemName;
            assetInfo.generationId = response.generation_id;
            assetInfo.generatedDate = System.DateTime.Now;
            assetInfo.triangleCount = response.actual_triangles;
            assetInfo.fileSize = response.file_size_bytes;
            assetInfo.qualityScore = response.quality_score;
            
            if (debugMode)
                Debug.Log($"üîß Mod√®le configur√©: {itemName} ({response.actual_triangles} triangles)");
        }
        
        /// <summary>
        /// Optimise le mesh pour le runtime
        /// </summary>
        void OptimizeMeshForRuntime(GameObject model)
        {
            MeshFilter meshFilter = model.GetComponent<MeshFilter>();
            if (meshFilter != null && meshFilter.mesh != null)
            {
                Mesh mesh = meshFilter.mesh;
                
                // Optimise le mesh
                mesh.Optimize();
                mesh.RecalculateNormals();
                mesh.RecalculateBounds();
                
                if (debugMode)
                    Debug.Log($"üîß Mesh optimis√©: {mesh.vertexCount} vertices, {mesh.triangles.Length/3} triangles");
            }
        }
        
        /// <summary>
        /// Cr√©e un prefab depuis le mod√®le
        /// </summary>
        GameObject CreatePrefabFromModel(GameObject model, string itemName)
        {
            // En Phase 2B.3 : Simulation de cr√©ation de prefab
            // En Phase 2C : Utilisation de PrefabUtility.SaveAsPrefabAsset
            
            if (debugMode)
                Debug.Log($"üì¶ Prefab cr√©√© (simul√©): {itemName}");
            
            return model; // Pour l'instant, retourne le mod√®le directement
        }
        
        /// <summary>
        /// Met √† jour le cache avec le nouvel asset
        /// </summary>
        void UpdateAssetCache(string itemName, GameObject prefab, string modelPath, CSMResponse response)
        {
            if (DynamicAssetManager.Instance != null)
            {
                Debug.Log($"üíæ === AJOUT AU CACHE ===");
                Debug.Log($"Item: {itemName}");
                Debug.Log($"Prefab: {(prefab != null ? prefab.name : "null")}");
                Debug.Log($"Model Path: {modelPath}");
                
                // CORRECTION : Utilise la bonne m√©thode
                DynamicAssetManager.Instance.AddAssetToCache(itemName, prefab, modelPath);
                
                // V√©rification imm√©diate
                StartCoroutine(VerifyCacheAddition(itemName));
                
                if (debugMode)
                    Debug.Log($"‚úÖ Asset ajout√© au cache: {itemName}");
            }
            else
            {
                Debug.LogError("‚ùå DynamicAssetManager.Instance est null - Cache non mis √† jour !");
            }
        }
        
        /// <summary>
        /// V√©rifie que l'asset a bien √©t√© ajout√© au cache
        /// </summary>
        System.Collections.IEnumerator VerifyCacheAddition(string itemName)
        {
            yield return new WaitForSeconds(1f); // Laisse le temps au cache de se mettre √† jour
            
            if (DynamicAssetManager.Instance != null)
            {
                DynamicAssetManager.Instance.ShowCacheStats();
                
                // Test de r√©cup√©ration - SANS try-catch dans la coroutine
                Debug.Log($"üîç V√©rification cache pour: {itemName}");
                
                var task = DynamicAssetManager.Instance.GetQuestItemPrefab(itemName);
                
                // Attend que la t√¢che se termine
                while (!task.IsCompleted)
                {
                    yield return null;
                }
                
                // V√©rifie le r√©sultat apr√®s completion
                if (task.IsCompletedSuccessfully && task.Result != null)
                {
                    Debug.Log($"‚úÖ V√âRIFICATION CACHE R√âUSSIE: {itemName} trouv√© !");
                }
                else if (task.IsFaulted)
                {
                    Debug.LogError($"‚ùå Erreur v√©rification cache: {task.Exception?.GetBaseException()?.Message}");
                }
                else
                {
                    Debug.LogWarning($"‚ö†Ô∏è V√âRIFICATION CACHE √âCHOU√âE: {itemName} non trouv√©");
                }
            }
        }
        
        /// <summary>
        /// D√©termine la qualit√© de l'asset selon le nombre de triangles
        /// </summary>
        AssetQuality DetermineAssetQuality(int triangles)
        {
            if (triangles < 500) return AssetQuality.Low;
            if (triangles < 1500) return AssetQuality.Medium;
            if (triangles < 3000) return AssetQuality.High;
            return AssetQuality.Ultra;
        }
        
        /// <summary>
        /// D√©termine l'extension de fichier
        /// </summary>
        string GetFileExtension(string format, string url)
        {
            if (!string.IsNullOrEmpty(format))
            {
                switch (format.ToLower())
                {
                    case "fbx": return ".fbx";
                    case "obj": return ".obj";
                    case "glb": return ".glb";
                    case "gltf": return ".gltf";
                    default: return ".fbx";
                }
            }
            
            // Essaie d'extraire l'extension de l'URL
            try
            {
                string fileName = Path.GetFileName(new System.Uri(url).LocalPath);
                return Path.GetExtension(fileName);
            }
            catch
            {
                return ".fbx"; // Par d√©faut
            }
        }
        
        /// <summary>
        /// Affiche les statistiques d'import
        /// </summary>
        [ContextMenu("Show Import Stats")]
        public void ShowImportStats()
        {
            Debug.Log($@"üìä STATISTIQUES IMPORT CSM
T√©l√©chargements actifs: {activeDownloads}
Total t√©l√©chargements: {totalDownloads}
Imports r√©ussis: {successfulImports}
Imports √©chou√©s: {failedImports}
Taux de succ√®s: {(totalDownloads > 0 ? (successfulImports * 100f / totalDownloads) : 0):F1}%

Dossiers:
- Downloads: {fullDownloadPath}
- Models: {fullModelsPath}
- Prefabs: {fullPrefabsPath}");
        }
        
        /// <summary>
        /// Test d'instance forc√©
        /// </summary>
        [ContextMenu("Test Instance")]
        public void TestInstance()
        {
            Debug.Log($"üîç Test Instance CSMModelImporter:");
            Debug.Log($"  ‚Ä¢ Instance static: {(Instance != null ? "‚úÖ" : "‚ùå")}");
            Debug.Log($"  ‚Ä¢ Ce GameObject: {(this != null ? "‚úÖ" : "‚ùå")}");
            Debug.Log($"  ‚Ä¢ GameObject actif: {gameObject.activeInHierarchy}");
            Debug.Log($"  ‚Ä¢ Composant activ√©: {enabled}");
            
            if (Instance == null)
            {
                Debug.LogWarning("‚ö†Ô∏è Instance NULL - Force l'assignation...");
                Instance = this;
                Debug.Log("‚úÖ Instance forc√©e assign√©e");
            }
        }
        
        /// <summary>
        /// NOUVELLE M√âTHODE : Force l'initialisation si n√©cessaire
        /// </summary>
        public static CSMModelImporter GetOrCreateInstance()
        {
            if (Instance == null)
            {
                Debug.LogWarning("‚ö†Ô∏è CSMModelImporter.Instance NULL - Recherche dans la sc√®ne...");
                
                Instance = FindObjectOfType<CSMModelImporter>();
                
                if (Instance != null)
                {
                    Debug.Log("‚úÖ CSMModelImporter trouv√© dans la sc√®ne et assign√©");
                }
                else
                {
                    Debug.LogError("‚ùå Aucun CSMModelImporter trouv√© dans la sc√®ne !");
                }
            }
            
            return Instance;
        }
        [ContextMenu("Test Import")]
        public async void TestImport()
        {
            Debug.Log("üß™ Test d'import CSM...");
            
            // Cr√©e une r√©ponse de test
            CSMResponse testResponse = CSMResponse.CreateTestSuccessResponse("test_import");
            testResponse.download_url = "https://fake-url.com/test_model.fbx";
            testResponse.file_format = "fbx";
            
            GameObject result = await ImportModelFromCSMResponse(testResponse, "test_import");
            
            if (result != null)
            {
                Debug.Log($"‚úÖ Test d'import r√©ussi: {result.name}");
                
                // Optionnel : Spawn pour visualiser
                if (Input.GetKey(KeyCode.LeftShift))
                {
                    Vector3 spawnPos = Vector3.zero + Vector3.right * 3f;
                    Instantiate(result, spawnPos, Quaternion.identity);
                    Debug.Log($"üëÅÔ∏è Mod√®le spawn√© √† {spawnPos} pour visualisation");
                }
            }
            else
            {
                Debug.LogError("‚ùå Test d'import √©chou√©");
            }
        }
        
        /// <summary>
        /// Nettoie les fichiers temporaires
        /// </summary>
        [ContextMenu("Cleanup Downloads")]
        public void CleanupDownloads()
        {
            try
            {
                if (Directory.Exists(fullDownloadPath))
                {
                    string[] files = Directory.GetFiles(fullDownloadPath);
                    foreach (string file in files)
                    {
                        File.Delete(file);
                    }
                    Debug.Log($"üßπ {files.Length} fichiers nettoy√©s du dossier Downloads");
                }
            }
            catch (System.Exception e)
            {
                Debug.LogError($"‚ùå Erreur nettoyage: {e.Message}");
            }
        }
    }
    
    /// <summary>
    /// Composant pour stocker les m√©tadonn√©es des assets g√©n√©r√©s
    /// </summary>
    public class GeneratedAssetInfo : MonoBehaviour
    {
        [Header("Generation Info")]
        public string itemName;
        public string generationId;
        public System.DateTime generatedDate;
        
        [Header("Technical Info")]
        public int triangleCount;
        public long fileSize;
        public int qualityScore;
        
        [Header("Real File Info")]
        public string realFilePath;
        public long realFileSize;
        public bool wasReallyDownloaded;
        
        /// <summary>
        /// Affiche les infos de cet asset
        /// </summary>
        [ContextMenu("Show Asset Info")]
        public void ShowAssetInfo()
        {
            Debug.Log($@"üìã ASSET INFO: {itemName}
Generation ID: {generationId}
Date: {generatedDate:yyyy-MM-dd HH:mm:ss}
Triangles: {triangleCount:N0}
File Size: {fileSize:N0} bytes
Quality Score: {qualityScore}/100

REAL FILE INFO:
Downloaded: {(wasReallyDownloaded ? "‚úÖ OUI" : "‚ùå NON")}
File Path: {realFilePath ?? "N/A"}
Real Size: {realFileSize:N0} bytes");
        }
        
        /// <summary>
        /// Ouvre le fichier r√©el dans l'explorateur
        /// </summary>
        [ContextMenu("Open Real File")]
        public void OpenRealFile()
        {
            if (wasReallyDownloaded && !string.IsNullOrEmpty(realFilePath) && File.Exists(realFilePath))
            {
                System.Diagnostics.Process.Start("explorer.exe", $"/select,\"{realFilePath}\"");
                Debug.Log($"üìÅ Ouverture: {realFilePath}");
            }
            else
            {
                Debug.LogWarning("‚ö†Ô∏è Aucun fichier r√©el disponible");
            }
        }
    }
}